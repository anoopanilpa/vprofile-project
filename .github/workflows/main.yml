name: Hprofile Action
# how this pipline will run workflow_dispatch means only run when we run manually can change it to push or anything
#on: [push, workflow_dispatch]
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPO : vprofecrapp
  ECS_SERVC : vprof-ecs-svc1
  ECS_CLUSTER : vprof-ecsapp
  #from task definition
  ECS_TF_FILE : taskdeff.json
  #from task definition
  CONTAINER_NAME : vprof-ecsapp
jobs:
  Testing:
    #which runner
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: MavenTest
        run: mvn test

      #check style analysis
      - name: checkstyle
        run: mvn checkstyle:checkstyle

      - name: set java 11
        uses: actions/setup-java@v3
        with:
          distribution: "temurin" # See 'Supported distributions' for available options
          java-version: "11"

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run sonar-scanner
      #jacoco.exec this is created when run mvn test
      #checkstyle-result.xml is used for checkout result
      - name: SonarQube Scan
        run: sonar-scanner
          -Dsonar.host.url=${{ secrets.SONAR_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOCKEN }}
          -Dsonar.organization=${{ secrets.SONAR_ORG }}
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
          -Dsonar.sources=src/
          -Dsonar.junit.reportsPath=target/surefire-reports/
          -Dsonar.jacoco.reportsPath=target/jacoco.exec
          -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
          -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

#      - name: SonarQube Quality Gate check
#        id: sonarqube-quality-gate-check
#        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time.
#        timeout-minutes: 5
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOCKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  Build_PUBLISH:
    # needs menas this job is depend on previous job Testing  s
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: updating application.properties file
        #updateing RDS details
        run: |
          sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
          sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
          sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

      - name: Build & Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          # repo that we created on ECR
          repo: vprofecrapp
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          # context where docker file in our code
          context: ./

  Deploy_IMAGE:
    # needs menas this job is depend on previous job Testing
    # https://github.com/marketplace/actions/amazon-ecs-deploy-task-definition-action-for-github-actions
    needs: Build_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TF_FILE }}
          container-name: ${{ env.ECS_TF_FILE }}
          #the below mthord is used in action URL that from stepp with id build-image only us this if build step is in same stage
          #https://github.com/marketplace/actions/amazon-ecs-deploy-task-definition-action-for-github-actions
          image: ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ github.run_number }} 

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition:  ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVC }}
          cluster: ${{ env.ECS_CLUSTER }}
          # the below will wait untill container become stable and healthy
          wait-for-service-stability: true
